name: Build and Release Mobile App (Test Version)

on:
  push:
    tags:
      - 'v*'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write  # 需要写权限来创建 GitHub Release
  actions: write   # Actions 权限
  packages: write  # 包权限
  id-token: write  # ID token 权限

jobs:
  build:
    runs-on: macos-14
    timeout-minutes: 60

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # 注释掉所有编译相关步骤，只测试 Release 功能
      # - name: Setup Java
      #   uses: actions/setup-java@v4
      #   with:
      #     distribution: 'zulu'
      #     java-version: '17'

      # - name: Setup Flutter
      #   uses: subosito/flutter-action@v2
      #   with:
      #     flutter-version: '3.29.3'
      #     channel: 'stable'
      #     cache: true

      # - name: Verify signing keys
      #   run: |
      #     if [ -z "${{ secrets.KEY_JKS }}" ] || [ -z "${{ secrets.ALIAS }}" ] || [ -z "${{ secrets.ANDROID_KEY_PASSWORD }}" ] || [ -z "${{ secrets.ANDROID_STORE_PASSWORD }}" ]; then
      #       echo "❌ 缺少必要的签名密钥配置"
      #       echo "请确保以下 GitHub Secrets 已配置："
      #       echo "- KEY_JKS: 签名证书的 base64 编码"
      #       echo "- ALIAS: 证书别名"
      #       echo "- ANDROID_KEY_PASSWORD: 密钥密码"
      #       echo "- ANDROID_STORE_PASSWORD: 存储密码"
      #       exit 1
      #     fi
      #     echo "✅ 所有签名密钥配置已就绪"

      # - name: Setup signing certificate
      #   run: |
      #     echo "🔑 设置 Android 签名证书..."
      #     echo "${{ secrets.KEY_JKS }}" | base64 --decode > mobile/android/app-release-key.jks
      #     echo "✅ 签名证书设置完成"

      # - name: Create key.properties
      #   run: |
      #     echo "📝 创建 key.properties 文件..."
      #     cat > mobile/android/key.properties << EOF
      #     storePassword=${{ secrets.ANDROID_STORE_PASSWORD }}
      #     keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}
      #     keyAlias=${{ secrets.ALIAS }}
      #     storeFile=app-release-key.jks
      #     EOF
      #     echo "✅ key.properties 创建完成"

      # - name: Build APK
      #   working-directory: mobile
      #   run: |
      #     echo "🚀 开始构建 Android APK..."
      #     flutter clean
      #     flutter pub get
      #     flutter build apk --release --split-per-abi
      #     echo "✅ APK 构建完成"

      # - name: Verify APK signature
      #   working-directory: mobile
      #   run: |
      #     echo "🔍 验证 APK 签名..."
      #     APK_PATH="build/app/outputs/flutter-apk"
      #     for apk in $APK_PATH/*.apk; do
      #       if [ -f "$apk" ]; then
      #         echo "检查: $(basename "$apk")"
      #         if command -v apksigner >/dev/null 2>&1; then
      #           java -jar $ANDROID_HOME/build-tools/*/lib/apksigner.jar verify --verbose "$apk" || echo "apksigner 验证失败，尝试备用方法"
      #         fi
      #         jarsigner -verify -verbose -certs "$apk" && echo "✅ $(basename "$apk") 签名验证通过" || echo "❌ $(basename "$apk") 签名验证失败"
      #       fi
      #     done

      - name: Check GitHub Token Permissions
        run: |
          echo "🔍 检查 GitHub Token 权限..."
          echo "Repository: $GITHUB_REPOSITORY"
          echo "Actor: $GITHUB_ACTOR"  
          echo "Event: $GITHUB_EVENT_NAME"
          echo "Ref: $GITHUB_REF"
          echo "Ref Name: ${{ github.ref_name }}"
          echo "SHA: $GITHUB_SHA"
          
          # 测试 API 访问权限
          echo "🔍 测试 GitHub API 访问权限..."
          HTTP_CODE=$(curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
               -H "Accept: application/vnd.github.v3+json" \
               "https://api.github.com/repos/$GITHUB_REPOSITORY" \
               -o /dev/null -s -w "%{http_code}")
          echo "API Status Code: $HTTP_CODE"
          
          if [ "$HTTP_CODE" = "200" ]; then
            echo "✅ GitHub API 访问成功"
          else
            echo "❌ GitHub API 访问失败，状态码: $HTTP_CODE"
          fi
          
          # 测试 Releases API 权限
          echo "🔍 测试 Releases API 权限..."
          HTTP_CODE=$(curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
               -H "Accept: application/vnd.github.v3+json" \
               "https://api.github.com/repos/$GITHUB_REPOSITORY/releases" \
               -o /dev/null -s -w "%{http_code}")
          echo "Releases API Status Code: $HTTP_CODE"
          
          if [ "$HTTP_CODE" = "200" ]; then
            echo "✅ Releases API 访问成功"
          else
            echo "❌ Releases API 访问失败，状态码: $HTTP_CODE"
          fi

      - name: Create test release files
        run: |
          echo "📦 创建测试文件用于 Release..."
          mkdir -p release-files
          
          # 创建模拟的 APK 文件 (稍大一些，模拟真实APK)
          dd if=/dev/zero of=release-files/app-release.apk bs=1024 count=1024 2>/dev/null
          echo "这是一个测试 APK 文件 - 通用版本" >> release-files/app-release.apk
          
          dd if=/dev/zero of=release-files/app-arm64-v8a-release.apk bs=1024 count=800 2>/dev/null
          echo "这是一个测试 APK 文件 - ARM64 版本" >> release-files/app-arm64-v8a-release.apk
          
          dd if=/dev/zero of=release-files/app-armeabi-v7a-release.apk bs=1024 count=900 2>/dev/null
          echo "这是一个测试 APK 文件 - ARM32 版本" >> release-files/app-armeabi-v7a-release.apk
          
          dd if=/dev/zero of=release-files/app-x86_64-release.apk bs=1024 count=1100 2>/dev/null
          echo "这是一个测试 APK 文件 - x86_64 版本" >> release-files/app-x86_64-release.apk
          
          # 创建校验码文件
          cat > release-files/apk_checksums.txt << EOF
          # APK 文件校验码 (测试版本)
          # 生成时间: $(date)
          # 标签版本: ${{ github.ref_name }}
          # 构建编号: ${{ github.run_id }}
          
          ## MD5 校验码
          $(md5sum release-files/*.apk | sed 's|release-files/||')
          
          ## SHA1 校验码  
          $(sha1sum release-files/*.apk | sed 's|release-files/||')
          
          ## SHA256 校验码
          $(sha256sum release-files/*.apk | sed 's|release-files/||')
          EOF
          
          # 创建发布说明文件
          cat > release-files/RELEASE_NOTES.md << EOF
          # Immich Mobile App Release ${{ github.ref_name }} (测试版本)
          
          ⚠️ **这是测试版本，包含的是测试文件，不是真实的 APK！**
          
          **标签版本**: ${{ github.ref_name }}
          **构建时间**: ${{ github.run_id }}
          **提交哈希**: ${{ github.sha }}
          
          ## 📱 APK 文件 (测试文件)
          
          请下载适合你设备架构的 APK 文件：
          - \`app-release.apk\` - 通用版本（推荐）
          - \`app-arm64-v8a-release.apk\` - ARM64 设备
          - \`app-armeabi-v7a-release.apk\` - ARM 32位设备  
          - \`app-x86_64-release.apk\` - x86 64位设备
          
          ## 🔐 安全验证
          
          - 下载 \`apk_checksums.txt\` 文件验证 APK 完整性
          - 测试文件已包含校验码
          
          ## 📋 测试说明
          
          这是用于测试 GitHub Actions Release 功能的版本。
          文件内容为测试数据，请勿用于生产环境。
          
          ## 源码
          基于提交: ${{ github.sha }}
          EOF
          
          echo "📋 测试文件列表:"
          ls -la release-files/
          echo ""
          echo "📄 文件大小统计:"
          du -h release-files/*

      - name: Debug Release Files
        run: |
          echo "🔍 调试发布文件信息..."
          echo "当前工作目录: $(pwd)"
          echo "标签名称: ${{ github.ref_name }}"
          echo "是否预发布: ${{ contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') || contains(github.ref_name, 'rc') }}"
          
          echo ""
          echo "📋 发布文件详情:"
          ls -la release-files/
          
          echo ""
          echo "📄 发布说明内容:"
          cat release-files/RELEASE_NOTES.md
          
          echo ""
          echo "🔐 校验码文件内容:"
          head -20 release-files/apk_checksums.txt

      - name: Create GitHub Release
        uses: softprops/action-gh-release@c062e08bd532815e2082a85e87e3ef29c3e6d191 # v2.0.8
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          name: "Immich Mobile ${{ github.ref_name }} (测试版本)"
          body_path: release-files/RELEASE_NOTES.md
          files: |
            release-files/*.apk
            release-files/apk_checksums.txt
          draft: false
          prerelease: ${{ contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') || contains(github.ref_name, 'rc') }}
          generate_release_notes: true
          fail_on_unmatched_files: false 
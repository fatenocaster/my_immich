name: Build Android APK

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      ref:
        required: false
        type: string
    secrets:
      KEY_JKS:
        required: false  # 改为可选，支持无 secrets 构建
      ALIAS:
        required: false
      ANDROID_KEY_PASSWORD:
        required: false
      ANDROID_STORE_PASSWORD:
        required: false
  pull_request:
  push:
    branches: [main]
    tags:
      - 'v*'  # 匹配所有以 v 开头的标签，如 v1.0.0, v2.1.3 等

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions: {}

jobs:
  pre-job:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      should_run: ${{ steps.found_paths.outputs.mobile == 'true' || steps.should_force.outputs.should_force == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - id: found_paths
        uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36 # v3.0.2
        with:
          filters: |
            mobile:
              - 'mobile/**'
            workflow:
              - '.github/workflows/build-mobile.yml'
      - name: Check if we should force jobs to run
        id: should_force
        run: echo "should_force=${{ steps.found_paths.outputs.workflow == 'true' || github.event_name == 'workflow_call' || github.event_name == 'workflow_dispatch' }}" >> "$GITHUB_OUTPUT"

  build-sign-android:
    name: Build and Sign Release Android APK
    needs: pre-job
    permissions:
      contents: read
    # 需要所有签名证书才能构建 release 版本
    if: ${{ github.actor != 'dependabot[bot]' && needs.pre-job.outputs.should_run == 'true' }}
    runs-on: macos-14

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ inputs.ref || github.sha }}
          persist-credentials: false

      - uses: actions/setup-java@c5195efecf7bdfc987ee8bae7a71cb8b11521c00 # v4.7.1
        with:
          distribution: 'zulu'
          java-version: '17'
          cache: 'gradle'

      - name: Setup Flutter SDK
        uses: subosito/flutter-action@e938fdf56512cc96ef2f93601a5a40bde3801046 # v2.19.0
        with:
          channel: 'stable'
          flutter-version-file: ./mobile/pubspec.yaml
          cache: true

      - name: Create the Keystore
        env:
          KEY_JKS: ${{ secrets.KEY_JKS }}
        working-directory: ./mobile
        run: |
          if [ -z "$KEY_JKS" ]; then
            echo "Error: KEY_JKS secret is required for release build"
            exit 1
          fi
          echo "Creating keystore for signed release build"
          echo $KEY_JKS | base64 -d > android/key.jks

      - name: Get Packages
        working-directory: ./mobile
        run: flutter pub get

      - name: Generate translation file
        run: make translation
        working-directory: ./mobile

      - name: Generate platform APIs
        run: make pigeon
        working-directory: ./mobile

      - name: Validate Signing Secrets
        env:
          ALIAS: ${{ secrets.ALIAS }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
          ANDROID_STORE_PASSWORD: ${{ secrets.ANDROID_STORE_PASSWORD }}
        run: |
          if [ -z "$ALIAS" ] || [ -z "$ANDROID_KEY_PASSWORD" ] || [ -z "$ANDROID_STORE_PASSWORD" ]; then
            echo "Error: All signing secrets are required (ALIAS, ANDROID_KEY_PASSWORD, ANDROID_STORE_PASSWORD)"
            exit 1
          fi
          echo "All signing secrets are available"

      - name: Build Signed Release APK
        working-directory: ./mobile
        env:
          ALIAS: ${{ secrets.ALIAS }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
          ANDROID_STORE_PASSWORD: ${{ secrets.ANDROID_STORE_PASSWORD }}
        run: |
          echo "Building signed release APK..."
          flutter build apk --release
          echo "Building signed release APK with ABI splits..."
          flutter build apk --release --split-per-abi --target-platform android-arm,android-arm64,android-x64

      - name: Verify APK Signature
        working-directory: ./mobile
        run: |
          echo "Verifying APK signatures..."
          for apk in build/app/outputs/flutter-apk/*.apk; do
            if [ -f "$apk" ]; then
              echo "Checking signature for: $(basename $apk)"
              $ANDROID_HOME/build-tools/*/apksigner verify --verbose "$apk"
            fi
          done

      - name: Publish Android Artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: android-apk
          path: mobile/build/app/outputs/flutter-apk/*.apk

name: Build and Release Mobile App (Test Version)

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: macos-14
    timeout-minutes: 60

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # 注释掉所有编译相关步骤，只测试 Release 功能
      # - name: Setup Java
      #   uses: actions/setup-java@v4
      #   with:
      #     distribution: 'zulu'
      #     java-version: '17'

      # - name: Setup Flutter
      #   uses: subosito/flutter-action@v2
      #   with:
      #     flutter-version: '3.29.3'
      #     channel: 'stable'
      #     cache: true

      # - name: Verify signing keys
      #   run: |
      #     if [ -z "${{ secrets.KEY_JKS }}" ] || [ -z "${{ secrets.ALIAS }}" ] || [ -z "${{ secrets.ANDROID_KEY_PASSWORD }}" ] || [ -z "${{ secrets.ANDROID_STORE_PASSWORD }}" ]; then
      #       echo "❌ 缺少必要的签名密钥配置"
      #       echo "请确保以下 GitHub Secrets 已配置："
      #       echo "- KEY_JKS: 签名证书的 base64 编码"
      #       echo "- ALIAS: 证书别名"
      #       echo "- ANDROID_KEY_PASSWORD: 密钥密码"
      #       echo "- ANDROID_STORE_PASSWORD: 存储密码"
      #       exit 1
      #     fi
      #     echo "✅ 所有签名密钥配置已就绪"

      # - name: Setup signing certificate
      #   run: |
      #     echo "🔑 设置 Android 签名证书..."
      #     echo "${{ secrets.KEY_JKS }}" | base64 --decode > mobile/android/app-release-key.jks
      #     echo "✅ 签名证书设置完成"

      # - name: Create key.properties
      #   run: |
      #     echo "📝 创建 key.properties 文件..."
      #     cat > mobile/android/key.properties << EOF
      #     storePassword=${{ secrets.ANDROID_STORE_PASSWORD }}
      #     keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}
      #     keyAlias=${{ secrets.ALIAS }}
      #     storeFile=app-release-key.jks
      #     EOF
      #     echo "✅ key.properties 创建完成"

      # - name: Build APK
      #   working-directory: mobile
      #   run: |
      #     echo "🚀 开始构建 Android APK..."
      #     flutter clean
      #     flutter pub get
      #     flutter build apk --release --split-per-abi
      #     echo "✅ APK 构建完成"

      # - name: Verify APK signature
      #   working-directory: mobile
      #   run: |
      #     echo "🔍 验证 APK 签名..."
      #     APK_PATH="build/app/outputs/flutter-apk"
      #     for apk in $APK_PATH/*.apk; do
      #       if [ -f "$apk" ]; then
      #         echo "检查: $(basename "$apk")"
      #         if command -v apksigner >/dev/null 2>&1; then
      #           java -jar $ANDROID_HOME/build-tools/*/lib/apksigner.jar verify --verbose "$apk" || echo "apksigner 验证失败，尝试备用方法"
      #         fi
      #         jarsigner -verify -verbose -certs "$apk" && echo "✅ $(basename "$apk") 签名验证通过" || echo "❌ $(basename "$apk") 签名验证失败"
      #       fi
      #     done

      - name: Create test release files
        run: |
          echo "📦 创建测试文件用于 Release..."
          mkdir -p release-files
          
          # 创建模拟的 APK 文件
          echo "这是一个测试 APK 文件 - 通用版本" > release-files/app-release.apk
          echo "这是一个测试 APK 文件 - ARM64 版本" > release-files/app-arm64-v8a-release.apk
          echo "这是一个测试 APK 文件 - ARM32 版本" > release-files/app-armeabi-v7a-release.apk
          echo "这是一个测试 APK 文件 - x86_64 版本" > release-files/app-x86_64-release.apk
          
          # 创建校验码文件
          cat > release-files/apk_checksums.txt << EOF
          # APK 文件校验码 (测试版本)
          # 生成时间: $(date)
          # 标签版本: ${{ github.ref_name }}
          
          ## MD5 校验码
          $(md5sum release-files/*.apk | sed 's|release-files/||')
          
          ## SHA1 校验码  
          $(sha1sum release-files/*.apk | sed 's|release-files/||')
          
          ## SHA256 校验码
          $(sha256sum release-files/*.apk | sed 's|release-files/||')
          EOF
          
          echo "📋 测试文件列表:"
          ls -la release-files/

      - name: Create GitHub Release with GitHub CLI
        run: |
          echo "🚀 使用 GitHub CLI 创建 Release..."
          
          # 创建发布说明
          RELEASE_BODY="## Immich Mobile App Release ${{ github.ref_name }} (测试版本)

          这是 Immich 移动应用的测试发布版本。

          **标签版本**: ${{ github.ref_name }}
          **构建时间**: ${{ github.run_id }}
          **提交哈希**: ${{ github.sha }}

          ### 📱 APK 文件 (测试文件)

          请下载适合你设备架构的 APK 文件：
          - \`app-release.apk\` - 通用版本（推荐）
          - \`app-arm64-v8a-release.apk\` - ARM64 设备
          - \`app-armeabi-v7a-release.apk\` - ARM 32位设备  
          - \`app-x86_64-release.apk\` - x86 64位设备

          ### 🔐 安全验证

          - 下载 \`apk_checksums.txt\` 文件验证 APK 完整性
          - 所有 APK 文件均已签名，确保安全可靠

          ### 📋 安装说明

          ⚠️ **注意：这是测试版本，包含的是测试文件，不是真实的 APK！**

          ### 源码
          基于提交: ${{ github.sha }}"
          
          # 检查是否是预发布版本
          if [[ "${{ github.ref_name }}" == *"beta"* ]] || [[ "${{ github.ref_name }}" == *"alpha"* ]] || [[ "${{ github.ref_name }}" == *"rc"* ]]; then
            PRERELEASE_FLAG="--prerelease"
          else
            PRERELEASE_FLAG=""
          fi
          
          # 尝试使用 gh CLI 创建 release
          echo "📝 Release 内容预览:"
          echo "标签: ${{ github.ref_name }}"
          echo "文件数量: $(ls -1 release-files/ | wc -l)"
          echo "文件列表:"
          ls -la release-files/
          
          if gh release create "${{ github.ref_name }}" \
            --title "Immich Mobile ${{ github.ref_name }} (测试)" \
            --notes "$RELEASE_BODY" \
            $PRERELEASE_FLAG \
            release-files/*; then
            echo "✅ GitHub CLI Release 创建成功!"
          else
            echo "❌ GitHub CLI 失败，尝试使用 curl API..."
            
            # 备用方案：使用 curl 直接调用 GitHub API
            echo "🔄 使用 curl 创建 Release..."
            
            # 构建 JSON 数据
            PRERELEASE_BOOL="false"
            if [[ "${{ github.ref_name }}" == *"beta"* ]] || [[ "${{ github.ref_name }}" == *"alpha"* ]] || [[ "${{ github.ref_name }}" == *"rc"* ]]; then
              PRERELEASE_BOOL="true"
            fi
            
            # 创建 Release
            RELEASE_RESPONSE=$(curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/releases" \
              -d "{
                \"tag_name\": \"${{ github.ref_name }}\",
                \"name\": \"Immich Mobile ${{ github.ref_name }} (测试)\",
                \"body\": \"$RELEASE_BODY\",
                \"draft\": false,
                \"prerelease\": $PRERELEASE_BOOL
              }")
            
            RELEASE_ID=$(echo "$RELEASE_RESPONSE" | jq -r '.id // empty')
            
            if [ -n "$RELEASE_ID" ]; then
              echo "✅ Release 创建成功 (ID: $RELEASE_ID)"
              
              # 上传文件
              for file in release-files/*; do
                if [ -f "$file" ]; then
                  filename=$(basename "$file")
                  echo "📤 上传: $filename"
                  
                  curl -X POST \
                    -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                    -H "Content-Type: application/octet-stream" \
                    --data-binary @"$file" \
                    "https://uploads.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID/assets?name=$filename"
                  
                  echo "✅ $filename 上传完成"
                fi
              done
            else
              echo "❌ Release 创建失败"
              echo "API 响应: $RELEASE_RESPONSE"
              exit 1
            fi
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} 